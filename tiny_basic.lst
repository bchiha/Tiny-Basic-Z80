# File tiny_basic_2k.z80
0000			;************************************************************* 
0000			; 
0000			;                 TINY BASIC FOR ZILOG Z80 
0000			;                       VERSION 2.0 
0000			;                     BY LI-CHEN WANG 
0000			; 
0000			;                  MODIFIED AND TRANSLATED 
0000			;                    TO INTEL MNEMONICS 
0000			;                     BY ROGER RAUSKOLB 
0000			;                      10 OCTOBER,1976 
0000			; 
0000			;                  MODIFIED AND TRANSLATED 
0000			;                    TO ZILOG MNEMONICS 
0000			;                      BY DOUG GABBARD 
0000			;            www.retrodepot.net 
0000			; 
0000			;           RELEASED TO THE PUBLIC 
0000			;                      10 OCTOBER,2017 
0000			;                  YEAH, 41 YEARS LATER.... 
0000			; 
0000			;                         @COPYLEFT 
0000			;                   ALL WRONGS RESERVED 
0000			; 
0000			;************************************************************* 
0000			; This code is derived from the original 8080 Tiny Basic. 
0000			; It was first compiled in 8080 Mnemonics, then disassembled 
0000			; into Zilog Mnemonics.  And then checked against the original 
0000			; to ensure accuracy.  It was then partially enhanced with z80 
0000			; specific code. And once done, it was then modified to work 
0000			; with the G80-S Micro Computer. However, that portion of the 
0000			; code has been left out in order to make this code a little 
0000			; more portable.  There are only three routines that one needs 
0000			; to write, and specifing the serial port's I/O address, in 
0000			; order to make this version work with your own DIY computer. 
0000			; Those routines can be found at the end of the source code. 
0000			; 
0000			; I hope you find good use for this relic. However, I would 
0000			; ask that if you do find use for it, please put a reference 
0000			; to me in your work. And please, distribute freely. 
0000			;************************************************************* 
0000			 
0000			SerialPort:  EQU 00H     ;This is for your I/0 
0000			 
0000			 
0000			SPACE:           EQU     020H            ; Space 
0000			TAB:             EQU     09H             ; HORIZONTAL TAB 
0000			CTRLC:           EQU     03H             ; Control "C" 
0000			CTRLG:           EQU     07H             ; Control "G" 
0000			BKSP:            EQU     08H             ; Back space 
0000			LF:              EQU     0AH             ; Line feed 
0000			CS:              EQU     0CH             ; Clear screen 
0000			CR:              EQU     0DH             ; Carriage return 
0000			CTRLO:           EQU     0FH             ; Control "O" 
0000			CTRLQ:           EQU     011H            ; Control "Q" 
0000			CTRLR:           EQU     012H            ; Control "R" 
0000			CTRLS:           EQU     013H            ; Control "S" 
0000			CTRLU:           EQU     015H            ; Control "U" 
0000			ESC:             EQU     01BH            ; Escape 
0000			DEL:             EQU     07FH            ; Delete 
0000			 
0000			STACK:           EQU     0FFFFH          ; STACK 
0000			OCSW:            EQU     08000H          ;SWITCH FOR OUTPUT 
0000			CURRNT:          EQU     OCSW+1          ;POINTS FOR OUTPUT 
0000			STKGOS:          EQU     OCSW+3          ;SAVES SP IN 'GOSUB' 
0000			VARNXT:          EQU     OCSW+5          ;TEMP STORAGE 
0000			STKINP:          EQU     OCSW+7          ;SAVES SP IN 'INPUT' 
0000			LOPVAR:          EQU     OCSW+9          ;'FOR' LOOP SAVE AREA 
0000			LOPINC:          EQU     OCSW+11         ;INCREMENT 
0000			LOPLMT:          EQU     OCSW+13         ;LIMIT 
0000			LOPLN:           EQU     OCSW+15         ;LINE NUMBER 
0000			LOPPT:           EQU     OCSW+17         ;TEXT POINTER 
0000			RANPNT:          EQU     OCSW+19         ;RANDOM NUMBER POINTER 
0000			TXTUNF:          EQU     OCSW+21         ;->UNFILLED TEXT AREA 
0000			TXTBGN:          EQU     OCSW+23         ;TEXT SAVE AREA BEGINS 
0000			 
0000			TXTEND:          EQU     0FF00H          ;TEXT SAVE AREA ENDS 
0000			 
0000			 
0000			;************************************************************* 
0000			; *** ZERO PAGE SUBROUTINES *** 
0000			; 
0000			; THE Z80 INSTRUCTION SET ALLOWS FOR 8 ROUTINES IN LOW MEMORY 
0000			; THAT MAY BE CALLED BY RST 00H, 08H, 10H, 18H, 20H, 28H, 30H, 
0000			; AND 38H.  THIS IS A ONE BYTE INSTRUCTION, AND IS FUNCTIONALLY 
0000			; SIMILAR TO THE THREE BYTE INSTRUCTION 'CALL XXXX'. TINY BASIC 
0000			; WILL USE THE RST INSTRUCTION FOR THE 7 MOST FREQUENTLY USED 
0000			; SUBROUTINES. TWO OTHER SUBROUTINES (CRLF & TSTNUM) ARE ALSO 
0000			; IN THIS SECTION. THEY CAN BE REACHED WITH 'CALL'. 
0000			;************************************************************* 
0000			 
0000			DWA:    MACRO WHERE 
0000			        DB   (WHERE >> 8) + 128 
0000			        DB   WHERE & 0FFH 
0000			        ENDM 
0000			 
0000			        ORG  0000H 
0000			 
0000			START: 
0000 31 ff ff		        LD SP,STACK                     ;*** COLD START *** 
0003 3e ff		        LD A,0FFH 
0005 c3 03 06		        JP INIT 
0008			 
0008 e3			RST08:  EX (SP),HL                      ;*** TSTC OR RST 08H *** 
0009 ef			        RST 28H                         ;IGNORE BLANKS AND 
000a be			        CP (HL)                         ;TEST CHARACTER 
000b c3 66 00		        JP TC1                          ;REST OF THIS IS AT TC1 
000e			 
000e			CRLF: 
000e 3e 0d		        LD A,CR                         ;*** CRLF *** 
0010			 
0010 f5			RST10:  PUSH AF                         ;*** OUTC OR RST 10H *** 
0011 3a 00 80		        LD A,(OCSW)                     ;PRINT CHARACTER ONLY 
0014 b7			        OR A                            ;IF OCSW SWITCH IS ON 
0015 c3 2e 06		        JP OUTC             ;REST OF THIS AT OUTC 
0018			 
0018 cd 55 03		RST18:  CALL EXPR2                      ;*** EXPR OR RST 18H *** 
001b e5			        PUSH HL                         ;EVALUATE AN EXPRESSION 
001c c3 11 03		        JP EXPR1                        ;REST OF IT AT EXPR1 
001f ..			        DB 'W' 
0020			 
0020 7c			RST20:  LD A,H                          ;*** COMP OR RST 20H *** 
0021 ba			        CP D                            ;COMPARE HL WITH DE 
0022 c0			        RET NZ                          ;RETURN CORRECT C AND 
0023 7d			        LD A,L                          ;Z FLAGS 
0024 bb			        CP E                            ;BUT OLD A IS LOST 
0025 c9			        RET 
0026 ..			        DB 'AN' 
0028			 
0028			SS1: 
0028 1a			RST28:  LD A,(DE)                       ;*** IGNBLK/RST 28H *** 
0029 fe 20		        CP 20H                          ;IGNORE BLANKS 
002b c0			        RET NZ                          ;IN TEXT (WHERE DE->) 
002c 13			        INC DE                          ;AND RETURN THE FIRST 
002d c3 28 00		        JP SS1                          ;NON-BLANK CHAR. IN A 
0030			 
0030 f1			RST30:  POP AF                          ;*** FINISH/RST 30H *** 
0031 cd 8d 04		        CALL FIN                        ;CHECK END OF COMMAND 
0034 c3 a0 04		        JP QWHAT                        ;PRINT "WHAT?" IF WRONG 
0037 ..			        DB 'G' 
0038			 
0038 ef			RST38:  RST 28H                         ;*** TSTV OR RST 38H *** 
0039 d6 40		        SUB 40H                         ;TEST VARIABLES 
003b d8			        RET C                           ;C:NOT A VARIABLE 
003c 20 18		        JR NZ,TV1                       ;NOT "@" ARRAY 
003e 13			        INC DE                          ;IT IS THE "@" ARRAY 
003f cd f6 03		        CALL PARN                       ;@ SHOULD BE FOLLOWED 
0042 29			        ADD HL,HL                       ;BY (EXPR) AS ITS INDEX 
0043 38 56		        JR C,QHOW                       ;IS INDEX TOO BIG? 
0045 d5			        PUSH DE                         ;WILL IT OVERWRITE 
0046 eb			        EX DE,HL                        ;TEXT? 
0047 cd 34 04		        CALL SIZE                       ;FIND SIZE OF FREE 
004a e7			        RST 20H                         ;AND CHECK THAT 
004b da ce 04		        JP C,ASORRY                     ;IF SO, SAY "SORRY" 
004e 21 00 ff		        LD HL,VARBGN                    ;IF NOT GET ADDRESS 
0051 cd 56 04		        CALL SUBDE                      ;OF @(EXPR) AND PUT IT 
0054 d1			        POP DE                          ;IN HL 
0055 c9			        RET                             ;C FLAG IS CLEARED 
0056			 
0056			TV1: 
0056 fe 1b		        CP 1BH                          ;NOT @, IS IT A TO Z? 
0058 3f			        CCF                             ;IF NOT RETURN C FLAG 
0059 d8			        RET C 
005a 13			        INC DE                          ;IF A THROUGH Z 
005b 21 00 ff		        LD HL,VARBGN                    ;COMPUTE ADDRESS OF 
005e 07			        RLCA                            ;THAT VARIABLE 
005f 85			        ADD A,L                         ;AND RETURN IT IN HL 
0060 6f			        LD L,A                          ;WITH C FLAG CLEARED 
0061 3e 00		        LD A,00H 
0063 8c			        ADC A,H 
0064 67			        LD H,A 
0065 c9			        RET 
0066			 
0066			TC1: 
0066 23			        INC HL                          ;COMPARE THE BYTE THAT 
0067 28 07		        JR Z,TC2                        ;FOLLOWS THE RST INST. 
0069 c5			        PUSH BC                         ;WITH THE TEXT (DE->) 
006a 4e			        LD C,(HL)                       ;IF NOT =, ADD THE 2ND 
006b 06 00		        LD B,00H                        ;BYTE THAT FOLLOWS THE 
006d 09			        ADD HL,BC                       ;RST TO THE OLD PC 
006e c1			        POP BC                          ;I.E., DO A RELATIVE 
006f 1b			        DEC DE                          ;JUMP IF NOT = 
0070			 
0070			TC2: 
0070 13			        INC DE                          ;IF =, SKIP THOSE BYTES 
0071 23			        INC HL                          ;AND CONTINUE 
0072 e3			        EX (SP),HL 
0073 c9			        RET 
0074			 
0074			TSTNUM: 
0074 21 00 00		        LD HL,0000H                     ;*** TSTNUM *** 
0077 44			        LD B,H                          ;TEST IF THE TEXT IS 
0078 ef			        RST 28H                         ;A NUMBER 
0079			 
0079			TN1: 
0079 fe 30		        CP 30H                          ;IF NOT, RETURN 0 IN 
007b d8			        RET C                           ;B AND HL 
007c fe 3a		        CP 3AH                          ;IF NUMBERS, CONVERT 
007e d0			        RET NC                          ;TO BINARY IN HL AND 
007f 3e f0		        LD A,0F0H                       ;SET B TO # OF DIGITS 
0081 a4			        AND H                           ;IF H>255, THERE IS NO 
0082 20 17		        JR NZ,QHOW                      ;ROOM FOR NEXT DIGIT 
0084 04			        INC B                           ;B COUNTS # OF DIGITS 
0085 c5			        PUSH BC 
0086 44			        LD B,H                          ;HL=10*HL+(NEW DIGIT) 
0087 4d			        LD C,L 
0088 29			        ADD HL,HL                       ;WHERE 10* IS DONE BY 
0089 29			        ADD HL,HL                       ;SHIFT AND ADD 
008a 09			        ADD HL,BC 
008b 29			        ADD HL,HL 
008c 1a			        LD A,(DE)                       ;AND (DIGIT) IS FROM 
008d 13			        INC DE                          ;STRIPPING THE ASCII 
008e e6 0f		        AND 0FH                         ;CODE 
0090 85			        ADD A,L 
0091 6f			        LD L,A 
0092 3e 00		        LD A,00H 
0094 8c			        ADC A,H 
0095 67			        LD H,A 
0096 c1			        POP BC 
0097 1a			        LD A,(DE)                       ;DO THIS DIGIT AFTER 
0098 f2 79 00		        JP P,TN1                        ;DIGIT. S SAYS OVERFLOW 
009b			 
009b			QHOW: 
009b d5			        PUSH DE                         ;*** ERROR "HOW?" *** 
009c			AHOW: 
009c 11 a2 00		        LD DE,HOW 
009f c3 a4 04		        JP ERROR_ROUTINE 
00a2			 
00a2			 
00a2 .. 0d		HOW:    DB "HOW?",CR 
00a7 .. 0d		OK:     DB "OK",CR 
00aa .. 0d		WHAT:   DB "WHAT?",CR 
00b0 .. 0d		SORRY:  DB "SORRY",CR 
00b6			 
00b6			;************************************************************* 
00b6			; 
00b6			; *** MAIN *** 
00b6			; 
00b6			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM 
00b6			; AND STORES IT IN THE MEMORY. 
00b6			; 
00b6			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE 
00b6			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS 
00b6			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO 
00b6			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER 
00b6			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR) 
00b6			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE 
00b6			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF 
00b6			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED 
00b6			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED. 
00b6			; 
00b6			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM 
00b6			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE 
00b6			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE 
00b6			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT". 
00b6			; 
00b6			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION 
00b6			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS 
00b6			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED 
00b6			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF". 
00b6			; 
00b6			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER 
00b6			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN 
00b6			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND 
00b6			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0. 
00b6			;************************************************************* 
00b6			 
00b6			RSTART: 
00b6 31 ff ff		        LD SP,STACK 
00b9			 
00b9			ST1: 
00b9 cd 0e 00		        CALL CRLF                       ;AND JUMP TO HERE 
00bc 11 a7 00		        LD DE,OK                        ;DE->STRING 
00bf 97			        SUB A                           ;A=0 
00c0 cd 2d 05		        CALL PRTSTG                     ;PRINT STRING UNTIL CR 
00c3 21 ca 00		        LD HL,ST2+1                     ;LITERAL 0 
00c6 22 01 80		        LD (CURRNT),HL                  ;CURRENT->LINE # = 0 
00c9			 
00c9			ST2: 
00c9 21 00 00		        LD HL,0000H 
00cc 22 09 80		        LD (LOPVAR),HL 
00cf 22 03 80		        LD (STKGOS),HL 
00d2			 
00d2			ST3: 
00d2 3e 3e		        LD A,'>'                        ;PROMPT '>' AND 
00d4 cd d3 04		        CALL GETLN                      ;READ A LINE 
00d7 d5			        PUSH DE                         ;DE->END OF LINE 
00d8 11 37 ff		        LD DE,BUFFER                    ;DE->BEGINNING OF LINE 
00db cd 74 00		        CALL TSTNUM                     ;TEST IF IT IS A NUMBER 
00de ef			        RST 28H 
00df 7c			        LD A,H                          ;HL=VALUE OF THE # OR 
00e0 b5			        OR L                            ;0 IF NO # WAS FOUND 
00e1 c1			        POP BC                          ;BC->END OF LINE 
00e2 ca 27 07		        JP Z,DIRECT 
00e5 1b			        DEC DE                          ;BACKUP DE AND SAVE 
00e6 7c			        LD A,H                          ;VALUE OF LINE # THERE 
00e7 12			        LD (DE),A 
00e8 1b			        DEC DE 
00e9 7d			        LD A,L 
00ea 12			        LD (DE),A 
00eb c5			        PUSH BC                         ;BC,DE->BEGIN, END 
00ec d5			        PUSH DE 
00ed 79			        LD A,C 
00ee 93			        SUB E 
00ef			 
00ef f5			        PUSH AF                         ;A=# OF BYTES IN LINE 
00f0 cd 08 05		        CALL FNDLN                      ;FIND THIS LINE IN SAVE 
00f3 d5			        PUSH DE                         ;AREA, DE->SAVE AREA 
00f4 20 10		        JR NZ,ST4                       ;NZ:NOT FOUND, INSERT 
00f6 d5			        PUSH DE                         ;Z:FOUND, DELETE IT 
00f7 cd 23 05		        CALL FNDNXT                     ;FIND NEXT LINE 
00fa			                                        ;DE->NEXT LINE 
00fa c1			        POP BC                          ;BC->LINE TO BE DELETED 
00fb 2a 15 80		        LD HL,(TXTUNF)                  ;HL->UNFILLED SAVE AREA 
00fe cd aa 05		        CALL MVUP                       ;MOVE UP TO DELETE 
0101 60			        LD H,B                          ;TXTUNF->UNFILLED ARA 
0102 69			        LD L,C 
0103 22 15 80		        LD (TXTUNF),HL                  ;UPDATE 
0106			 
0106			ST4: 
0106 c1			        POP BC                          ;GET READY TO INSERT 
0107 2a 15 80		        LD HL,(TXTUNF)                  ;BUT FIRST CHECK IF 
010a f1			        POP AF                          ;THE LENGTH OF NEW LINE 
010b e5			        PUSH HL                         ;IS 3 (LINE # AND CR) 
010c fe 03		        CP 03H                          ;THEN DO NOT INSERT 
010e 28 a6		        JR Z,RSTART                     ;MUST CLEAR THE STACK 
0110 85			        ADD A,L                         ;COMPUTE NEW TXTUNF 
0111 6f			        LD L,A 
0112 3e 00		        LD A,00H 
0114 8c			        ADC A,H 
0115 67			        LD H,A                          ;HL->NEW UNFILLED AREA 
0116 11 00 ff		        LD DE,TXTEND                    ;CHECK TO SEE IF THERE 
0119 e7			        RST 20H                         ;IS ENOUGH SPACE 
011a d2 cd 04		        JP NC,QSORRY                    ;SORRY, NO ROOM FOR IT 
011d 22 15 80		        LD (TXTUNF),HL                  ;OK, UPDATE TXTUNF 
0120 d1			        POP DE                          ;DE->OLD UNFILLED AREA 
0121 cd b2 05		        CALL MVDOWN 
0124 d1			        POP DE                          ;DE->BEGIN, HL->END 
0125 e1			        POP HL 
0126 cd aa 05		        CALL MVUP                       ;MOVE NEW LINE TO SAVE 
0129 18 a7		        JR ST3                          ;AREA 
012b			 
012b			;************************************************************* 
012b			; 
012b			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT 
012b			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE 
012b			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST 
012b			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS 
012b			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS: 
012b			; 
012b			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART' 
012b			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE 
012b			; GO BACK TO 'RSTART'. 
012b			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE. 
012b			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE. 
012b			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE 
012b			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.) 
012b			;************************************************************* 
012b			; 
012b			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO *** 
012b			; 
012b			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN' 
012b			; 
012b			; 'STOP(CR)' GOES BACK TO 'RSTART' 
012b			; 
012b			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN 
012b			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE 
012b			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM. 
012b			; 
012b			; THERE ARE 3 MORE ENTRIES IN 'RUN': 
012b			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT. 
012b			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT. 
012b			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE. 
012b			; 
012b			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET 
012b			; LINE, AND JUMP TO 'RUNTSL' TO DO IT. 
012b			;************************************************************* 
012b			 
012b			NEW: 
012b cd 9c 04		        CALL ENDCHK                     ;*** NEW(CR) *** 
012e 21 17 80		        LD HL,TXTBGN 
0131 22 15 80		        LD (TXTUNF),HL 
0134			STOP: 
0134 cd 9c 04		        CALL ENDCHK                     ;*** STOP(CR) *** 
0137 c3 b6 00		        JP RSTART 
013a			RUN: 
013a cd 9c 04		        CALL ENDCHK                     ;*** RUN(CR) *** 
013d 11 17 80		        LD DE,TXTBGN                    ;FIRST SAVED LINE 
0140			RUNNXL: 
0140 21 00 00		        LD HL,00H                       ;*** RUNNXL *** 
0143 cd 10 05		        CALL FNDLP                      ;FIND WHATEVER LINE # 
0146 da b6 00		        JP C,RSTART                     ;C:PASSED TXTUNF, QUIT 
0149			RUNTSL: 
0149 eb			        EX DE,HL                        ;*** RUNTSL *** 
014a 22 01 80		        LD (CURRNT),HL                  ;SET 'CURRENT'->LINE # 
014d eb			        EX DE,HL 
014e 13			        INC DE                          ;BUMP PASS LINE # 
014f 13			        INC DE 
0150			RUNSML: 
0150 cd 41 06		        CALL CHKIO                      ;*** RUNSML *** 
0153 21 ac 06		        LD HL,TAB2-1                    ;FIND COMMAND IN TAB2 
0156 c3 2a 07		        JP EXEC                         ;AND EXECUTE IT 
0159			GOTO: 
0159 df			        RST 18H                         ;*** GOTO EXPR *** 
015a d5			        PUSH DE                         ;SAVE FOR ERROR ROUTINE 
015b cd 9c 04		        CALL ENDCHK                     ;MUST FIND A CR 
015e cd 08 05		        CALL FNDLN                      ;FIND THE TARGET LINE 
0161 c2 9c 00		        JP NZ,AHOW                      ;NO SUCH LINE # 
0164 f1			        POP AF                          ;CLEAR THE PUSH DE 
0165 18 e2		        JR RUNTSL                       ;GO DO IT 
0167			 
0167			;************************************************************* 
0167			; 
0167			; *** LIST *** & PRINT *** 
0167			; 
0167			; LIST HAS TWO FORMS: 
0167			; 'LIST(CR)' LISTS ALL SAVED LINES 
0167			; 'LIST #(CR)' START LIST AT THIS LINE # 
0167			; YOU CAN STOP THE LISTING BY CONTROL C KEY 
0167			; 
0167			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)' 
0167			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK- 
0167			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS. 
0167			; 
0167			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS 
0167			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO 
0167			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT 
0167			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS 
0167			; SPECIFIED, 6 POSITIONS WILL BE USED. 
0167			; 
0167			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF 
0167			; DOUBLE QUOTES. 
0167			; 
0167			; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF) 
0167			; 
0167			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN 
0167			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST 
0167			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED. 
0167			;************************************************************* 
0167			 
0167			LIST: 
0167 cd 74 00		        CALL TSTNUM                     ;TEST IF THERE IS A # 
016a cd 9c 04		        CALL ENDCHK                     ;IF NO # WE GET A 0 
016d cd 08 05		        CALL FNDLN                      ;FIND THIS OR NEXT LINE 
0170			LS1: 
0170 da b6 00		        JP C,RSTART                     ;C:PASSED TXTUNF 
0173 cd 97 05		        CALL PRTLN                      ;PRINT THE LINE 
0176 cd 41 06		        CALL CHKIO                      ;STOP IF HIT CONTROL-C 
0179 cd 10 05		        CALL FNDLP                      ;FIND NEXT LINE 
017c 18 f2		        JR LS1                          ;AND LOOP BACK 
017e			PRINT: 
017e 0e 06		        LD C,06H                        ;C = # OF SPACES 
0180 cf			        RST 08H                         ;F NULL LIST & ";" 
0181 3b			        DB 3BH 
0182 05			        DB PR2-$-1 
0183 cd 0e 00		        CALL CRLF                       ;GIVE CR-LF AND 
0186 18 c8		        JR RUNSML                       ;CONTINUE SAME LINE 
0188			PR2: 
0188 cf			        RST 08H                         ;IF NULL LIST (CR) 
0189 0d			        DB CR 
018a 05			        DB PR0-$-1 
018b cd 0e 00		        CALL CRLF                       ;ALSO GIVE CR-LF AND 
018e 18 b0		        JR RUNNXL                       ;GO TO NEXT LINE 
0190			PR0: 
0190 cf			        RST 08H                         ;ELSE IS IT FORMAT? 
0191 ..			        DB '#' 
0192 04			        DB PR1-$-1 
0193 df			        RST 18H                         ;YES, EVALUATE EXPR. 
0194 4d			        LD C,L                          ;AND SAVE IT IN C 
0195 18 05		        JR PR3                          ;LOOK FOR MORE TO PRINT 
0197			PR1: 
0197 cd 38 05		        CALL QTSTG                      ;OR IS IT A STRING? 
019a 18 0c		        JR PR8                          ;IF NOT, MUST BE EXPR. 
019c			PR3: 
019c cf			        RST 08H                         ;IF ",", GO FIND NEXT 
019d ..			        DB ',' 
019e 05			        DB PR6-$-1 
019f cd 8d 04		        CALL FIN                        ;IN THE LIST. 
01a2 18 ec		        JR PR0                          ;LIST CONTINUES 
01a4			PR6: 
01a4 cd 0e 00		        CALL CRLF                       ;LIST ENDS 
01a7 f7			        RST 30H 
01a8			PR8: 
01a8 df			        RST 18H                         ;EVALUATE THE EXPR 
01a9 c5			        PUSH BC 
01aa cd 5b 05		        CALL PRTNUM                     ;PRINT THE VALUE 
01ad c1			        POP BC 
01ae 18 ec		        JR PR3                          ;MORE TO PRINT? 
01b0			 
01b0			;************************************************************* 
01b0			; 
01b0			; *** GOSUB *** & RETURN *** 
01b0			; 
01b0			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO' 
01b0			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER 
01b0			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE 
01b0			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED 
01b0			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED. 
01b0			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS 
01b0			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS' 
01b0			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE), 
01b0			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S. 
01b0			; 
01b0			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS 
01b0			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT 
01b0			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE 
01b0			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR. 
01b0			;************************************************************* 
01b0			 
01b0			GOSUB: 
01b0 cd db 05		        CALL PUSHA                      ;SAVE THE CURRENT "FOR" 
01b3 df			        RST 18H                         ;PARAMETERS 
01b4 d5			        PUSH DE                         ;AND TEXT POINTER 
01b5 cd 08 05		        CALL FNDLN                      ;FIND THE TARGET LINE 
01b8 c2 9c 00		        JP NZ,AHOW                      ;NOT THERE. SAY "HOW?" 
01bb 2a 01 80		        LD HL,(CURRNT)                  ;FOUND IT, SAVE OLD. 
01be e5			        PUSH HL                         ;'CURRNT' OLD 'STKGOS' 
01bf 2a 03 80		        LD HL,(STKGOS) 
01c2 e5			        PUSH HL 
01c3 21 00 00		        LD HL,0000H                     ;AND LOAD NEW ONES 
01c6 22 09 80		        LD (LOPVAR),HL 
01c9 39			        ADD HL,SP 
01ca 22 03 80		        LD (STKGOS),HL 
01cd c3 49 01		        JP RUNTSL                       ;THEN RUN THAT LINE 
01d0			RETURN: 
01d0 cd 9c 04		        CALL ENDCHK                     ;THERE MUST BE A CR 
01d3 2a 03 80		        LD HL,(STKGOS)                  ;OLD STACK POINTER 
01d6 7c			        LD A,H                          ;0 MEANS NOT EXIST 
01d7 b5			        OR L 
01d8 ca a0 04		        JP Z,QWHAT                      ;SO, WE SAY: "WHAT?" 
01db f9			        LD SP,HL                        ;ELSE, RESTORE IT 
01dc e1			        POP HL 
01dd 22 03 80		        LD (STKGOS),HL                  ;AND THE OLD "STKGOS" 
01e0 e1			        POP HL 
01e1 22 01 80		        LD (CURRNT),HL                  ;AND THE OLD 'CURRNT' 
01e4 d1			        POP DE                          ;OLD TEXT POINTER 
01e5 cd c0 05		        CALL POPA                       ;OLD "FOR" PARAMETERS 
01e8 f7			        RST 30H                         ;AND WE ARE BACK HOME 
01e9			 
01e9			;************************************************************* 
01e9			; 
01e9			; *** FOR *** & NEXT *** 
01e9			; 
01e9			; 'FOR' HAS TWO FORMS: 
01e9			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2' 
01e9			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH 
01e9			; EXP3=1.  (I.E., WITH A STEP OF +1.) 
01e9			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE 
01e9			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3 
01e9			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN 
01e9			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC', 
01e9			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME- 
01e9			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO 
01e9			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK 
01e9			; BEFORE THE NEW ONE OVERWRITES IT. 
01e9			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME 
01e9			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP. 
01e9			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED. 
01e9			; (PURGED FROM THE STACK..) 
01e9			; 
01e9			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL) 
01e9			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED 
01e9			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN 
01e9			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT 
01e9			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO 
01e9			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT 
01e9			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND 
01e9			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA 
01e9			; IS PURGED AND EXECUTION CONTINUES. 
01e9			;************************************************************* 
01e9			 
01e9			FOR: 
01e9 cd db 05		        CALL PUSHA                      ;SAVE THE OLD SAVE AREA 
01ec cd 7a 04		        CALL SETVAL                     ;SET THE CONTROL VAR. 
01ef 2b			        DEC HL                          ;HL IS ITS ADDRESS 
01f0 22 09 80		        LD (LOPVAR),HL                  ;SAVE THAT 
01f3 21 02 07		        LD HL,TAB5-1                    ;USE 'EXEC' TO LOOK 
01f6 c3 2a 07		        JP EXEC                         ;FOR THE WORK 'TO' 
01f9			FR1: 
01f9 df			        RST 18H                         ;EVALUATE THE LIMITE 
01fa 22 0d 80		        LD (LOPLMT),HL                  ;SAVE THAT 
01fd 21 08 07		        LD HL,TAB6-1                    ;USE 'EXEC' TO LOOK 
0200 c3 2a 07		        JP EXEC                         ;FOR THE WORD 'STEP' 
0203			FR2: 
0203 df			        RST 18H                         ;FOUND IT, GET STEP 
0204 18 03		        JR FR4 
0206			FR3: 
0206 21 01 00		        LD HL,0001H                     ;NOT FOUND, SET TO 1 
0209			FR4: 
0209 22 0b 80		        LD (LOPINC),HL                  ;SAVE THAT TOO 
020c			FR5: 
020c 2a 01 80		        LD HL,(CURRNT)                  ;SAVE CURRENT LINE # 
020f 22 0f 80		        LD (LOPLN),HL 
0212 eb			        EX DE,HL                        ;AND TEXT POINTER 
0213 22 11 80		        LD (LOPPT),HL 
0216 01 0a 00		        LD BC,0AH                       ;DIG INTO STACK TO 
0219 2a 09 80		        LD HL,(LOPVAR)                  ;FIND 'LOPVAR' 
021c eb			        EX DE,HL 
021d 60			        LD H,B 
021e 68			        LD L,B                          ;HL=0 NOW 
021f 39			        ADD HL,SP                       ;HERE IS THE STACK 
0220			FR7: 
0220 09			        ADD HL,BC                       ;EACH LEVEL IS 10 DEEP - DIS = 09 
0221 7e			        LD A,(HL)                       ;GET THAT OLD 'LOPVAR' 
0222 23			        INC HL 
0223 b6			        OR (HL) 
0224 28 18		        JR Z,FR8                        ;0 SAYS NO MORE IN IT 
0226 7e			        LD A,(HL) 
0227 2b			        DEC HL 
0228 ba			        CP D                            ;SAME AS THIS ONE? 
0229 20 f5		        JR NZ,FR7 
022b 7e			        LD A,(HL)                       ;THE OTHER HALF? 
022c bb			        CP E 
022d 20 f1		        JR NZ,FR7 
022f eb			        EX DE,HL                        ;YES, FOUND ONE 
0230 21 00 00		        LD HL,0000H 
0233 39			        ADD HL,SP                       ;TRY TO MOVE SP 
0234 44			        LD B,H 
0235 4d			        LD C,L 
0236 21 0a 00		        LD HL,000AH 
0239 19			        ADD HL,DE 
023a cd b2 05		        CALL MVDOWN                     ;AND PURGE 10 WORDS 
023d f9			        LD SP,HL                        ;IN THE STACK 
023e			FR8: 
023e 2a 11 80		        LD HL,(LOPPT)                   ;JOB DONE, RESTORE DE 
0241 eb			        EX DE,HL 
0242 f7			        RST 30H                         ;AND CONTINUE 
0243			; 
0243			NEXT: 
0243 ff			        RST 38H                         ;GET ADDRESS OF VAR. 
0244 da a0 04		        JP C,QWHAT                      ;NO VARIABLE, "WHAT?" 
0247 22 05 80		        LD (VARNXT),HL                  ;YES, SAVE IT 
024a			NX0: 
024a d5			        PUSH DE                         ;SAVE TEXT POINTER 
024b eb			        EX DE,HL 
024c 2a 09 80		        LD HL,(LOPVAR)                  ;GET VAR. IN 'FOR' 
024f 7c			        LD A,H 
0250 b5			        OR L                            ;0 SAYS NEVER HAD ONE 
0251 ca a1 04		        JP Z,AWHAT                      ;SO WE ASK: "WHAT?" 
0254 e7			        RST 20H                         ;ELSE WE CHECK THEM 
0255 28 09		        JR Z,NX3                        ;OK, THEY AGREE 
0257 d1			        POP DE                          ;NO, LET'S SEE 
0258 cd c0 05		        CALL POPA                       ;PURGE CURRENT LOOP 
025b 2a 05 80		        LD HL,(VARNXT)                  ;AND POP ONE LEVEL 
025e 18 ea		        JR NX0                          ;GO CHECK AGAIN 
0260			NX3: 
0260 5e			        LD E,(HL)                       ;COME HERE WHEN AGREED 
0261 23			        INC HL 
0262 56			        LD D,(HL)                       ;DE=VALUE OF VAR. 
0263 2a 0b 80		        LD HL,(LOPINC) 
0266 e5			        PUSH HL 
0267 7c			        LD A,H 
0268 aa			        XOR D 
0269 7a			        LD A,D 
026a 19			        ADD HL,DE                       ;ADD ONE STEP 
026b fa 72 02		        JP M,NX4 
026e ac			        XOR H 
026f fa 93 02		        JP M,NX5 
0272			NX4: 
0272 eb			        EX DE,HL 
0273 2a 09 80		        LD HL,(LOPVAR)                  ;PUT IT BACK 
0276 73			        LD (HL),E 
0277 23			        INC HL 
0278 72			        LD (HL),D 
0279 2a 0d 80		        LD HL,(LOPLMT)                  ;HL->LIMIT 
027c f1			        POP AF                          ;OLD HL 
027d b7			        OR A 
027e f2 82 02		        JP P,NX1                        ;STEP > 0 
0281 eb			        EX DE,HL                        ;STEP < 0 
0282			NX1: 
0282 cd 72 04		        CALL CKHLDE                     ;COMPARE WITH LIMIT 
0285 d1			        POP DE                          ;RESTORE TEXT POINTER 
0286 38 0d		        JR C,NX2                        ;OUTSIDE LIMIT 
0288 2a 0f 80		        LD HL,(LOPLN)                   ;WITHIN LIMIT, GO 
028b 22 01 80		        LD (CURRNT),HL                  ;BACK TO THE SAVED 
028e 2a 11 80		        LD HL,(LOPPT)                   ;'CURRNT' AND TEXT 
0291 eb			        EX DE,HL                        ;POINTER 
0292 f7			        RST 30H 
0293			NX5: 
0293 e1			        POP HL 
0294 d1			        POP DE 
0295			NX2: 
0295 cd c0 05		        CALL POPA                       ;PURGE THIS LOOP 
0298 f7			        RST 30H 
0299			 
0299			;************************************************************* 
0299			; 
0299			; *** REM *** IF *** INPUT *** & LET (& DEFLT) *** 
0299			; 
0299			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI. 
0299			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION. 
0299			; 
0299			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE 
0299			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS. 
0299			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE 
0299			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE 
0299			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND 
0299			; EXECUTION CONTINUES AT THE NEXT LINE. 
0299			; 
0299			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED 
0299			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR 
0299			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS 
0299			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS 
0299			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN 
0299			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE 
0299			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING 
0299			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE 
0299			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR. 
0299			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR. 
0299			; 
0299			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?", 
0299			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT. 
0299			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C. 
0299			; THIS IS HANDLED IN 'INPERR'. 
0299			; 
0299			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS. 
0299			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR. 
0299			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE. 
0299			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'. 
0299			; THIS IS DONE BY 'DEFLT'. 
0299			;************************************************************* 
0299			 
0299			REM: 
0299 21 00 00		        LD HL,0000H                     ;*** REM *** 
029c 18 01		        JR IF1                          ;THIS IS LIKE 'IF 0' 
029e			IFF: 
029e df			        RST 18H                         ;*** IF *** 
029f			IF1: 
029f 7c			        LD A,H                          ;IS THE EXPR.=0? 
02a0 b5			        OR L 
02a1 c2 50 01		        JP NZ,RUNSML                    ;NO, CONTINUE 
02a4 cd 25 05		        CALL FNDSKP                     ;YES, SKIP REST OF LINE 
02a7 d2 49 01		        JP NC,RUNTSL                    ;AND RUN THE NEXT LINE 
02aa c3 b6 00		        JP RSTART                       ;IF NO NEXT, RE-START 
02ad			INPERR: 
02ad 2a 07 80		        LD HL,(STKINP)                  ;*** INPERR *** 
02b0 f9			        LD SP,HL                        ;RESTORE OLD SP 
02b1 e1			        POP HL                          ;AND OLD 'CURRNT' 
02b2 22 01 80		        LD (CURRNT),HL 
02b5 d1			        POP DE                          ;AND OLD TEXT POINTER 
02b6 d1			        POP DE                          ;REDO INPUT 
02b7			INPUT:                                  ;*** INPUT *** 
02b7			IP1: 
02b7 d5			        PUSH DE                         ;SAVE IN CASE OF ERROR 
02b8 cd 38 05		        CALL QTSTG                      ;IS NEXT ITEM A STRING? 
02bb 18 05		        JR IP2                          ;NO 
02bd ff			        RST 38H                         ;YES, BUT FOLLOWED BY A 
02be 38 3c		        JR C,IP4                        ;VARIABLE? NO. 
02c0 18 10		        JR IP3                          ;YES. INPUT VARIABLE 
02c2			IP2: 
02c2 d5			        PUSH DE                         ;SAVE FOR 'PRTSTG' 
02c3 ff			        RST 38H                         ;MUST BE VARIABLE NOW 
02c4 da a0 04		        JP C,QWHAT                      ;"WHAT?" IT IS NOT? 
02c7 1a			        LD A,(DE)                       ;GET READY FOR 'PRTSTR' 
02c8 4f			        LD C,A 
02c9 97			        SUB A 
02ca 12			        LD (DE),A 
02cb d1			        POP DE 
02cc cd 2d 05		        CALL PRTSTG                     ;PRINT STRING AS PROMPT 
02cf 79			        LD A,C                          ;RESTORE TEXT 
02d0 1b			        DEC DE 
02d1 12			        LD (DE),A 
02d2			IP3: 
02d2 d5			        PUSH DE                         ;SAVE TEXT POINTER 
02d3 eb			        EX DE,HL 
02d4 2a 01 80		        LD HL,(CURRNT)                  ;ALSO SAVE 'CURRNT' 
02d7 e5			        PUSH HL 
02d8 21 b7 02		        LD HL,IP1                       ;A NEGATIVE NUMBER 
02db 22 01 80		        LD (CURRNT),HL                  ;AS A FLAG 
02de 21 00 00		        LD HL,0000H                     ;SAVE SP TOO 
02e1 39			        ADD HL,SP 
02e2 22 07 80		        LD (STKINP),HL 
02e5 d5			        PUSH DE                         ;OLD HL 
02e6 3e 3a		        LD A,3AH                        ;PRINT THIS TOO 
02e8 cd d3 04		        CALL GETLN                      ;AND GET A LINE 
02eb 11 37 ff		        LD DE,BUFFER                    ;POINTS TO BUFFER 
02ee df			        RST 18H                         ;EVALUATE INPUT 
02ef 00			        NOP                             ;CAN BE 'CALL ENDCHK' 
02f0 00			        NOP 
02f1 00			        NOP 
02f2 d1			        POP DE                          ;OK,GET OLD HL 
02f3 eb			        EX DE,HL 
02f4 73			        LD (HL),E                       ;SAVE VALUE IN VAR. 
02f5 23			        INC HL 
02f6 72			        LD (HL),D 
02f7 e1			        POP HL                          ;GET OLD 'CURRNT' 
02f8 22 01 80		        LD (CURRNT),HL 
02fb d1			        POP DE                          ;AND OLD TEXT POINTER 
02fc			IP4: 
02fc f1			        POP AF                          ;PURGE JUNK IN STACK 
02fd cf			        RST 08H                         ;IS NEXT CH. ','? 
02fe ..			        DB ',' 
02ff 02			        DB IP5-$-1 
0300 18 b5		        JR IP1                          ;YES, MORE ITEMS. 
0302			IP5: 
0302 f7			        RST 30H 
0303			DEFLT: 
0303 1a			        LD A,(DE)                       ;***  DEFLT *** 
0304 fe 0d		        CP CR                           ;EMPTY LINE IS OK 
0306 28 08		        JR Z,LT1                        ;ELSE IT IS 'LET' 
0308			LET: 
0308 cd 7a 04		        CALL SETVAL                     ;*** LET *** 
030b cf			        RST 08H                         ;SET VALUE TO VAR 
030c ..			        DB ','                          ;---DISASSEMBLE = INC L 
030d 02			        DB LT1-$-1                      ;---DISASSEMBLE = INC BC 
030e 18 f8		        JR LET                          ;ITEM BY ITEM 
0310			LT1: 
0310 f7			        RST 30H                         ;UNTIL FINISH 
0311			;************************************************************* 
0311			; 
0311			; *** EXPR *** 
0311			; 
0311			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS. 
0311			; <EXPR>::<EXPR2> 
0311			;         <EXPR2><REL.OP.><EXPR2> 
0311			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE 
0311			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE. 
0311			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....) 
0311			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS. 
0311			; <EXPR3>::=<EXPR4>(* OR /)(<EXPR4>)(....) 
0311			; <EXPR4>::=<VARIABLE> 
0311			;           <FUNCTION> 
0311			;           (<EXPR>) 
0311			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR> 
0311			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND 
0311			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE. 
0311			;************************************************************* 
0311			 
0311			EXPR1: 
0311 21 10 07		        LD HL,TAB8-1                    ;LOOKUP REL.OP. 
0314 c3 2a 07		        JP EXEC                         ;GO DO IT 
0317			XP11: 
0317 cd 40 03		        CALL XP18                       ;REL.OP.">=" 
031a d8			        RET C                           ;NO, RETURN HL=0 
031b 6f			        LD L,A                          ;YES, RETURN HL=1 
031c c9			        RET 
031d			XP12: 
031d cd 40 03		        CALL XP18                       ;REL.OP."#" 
0320 c8			        RET Z                           ;FALSE, RETURN HL=0 
0321 6f			        LD L,A                          ;TRUE, RETURN HL=1 
0322 c9			        RET 
0323			XP13: 
0323 cd 40 03		        CALL XP18                       ;REL.OP.">" 
0326 c8			        RET Z                           ;FALSE 
0327 d8			        RET C                           ;ALSO FALSE, HL=0 
0328 6f			        LD L,A                          ;TRUE, HL=1 
0329 c9			        RET 
032a			XP14: 
032a cd 40 03		        CALL XP18                       ;REL.OP."<=" 
032d 6f			        LD L,A                          ;SET HL=1 
032e c8			        RET Z                           ;REL. TRUE, RETURN 
032f d8			        RET C 
0330 6c			        LD L,H                          ;ELSE SET HL=0 
0331 c9			        RET 
0332			XP15: 
0332 cd 40 03		        CALL XP18                       ;REL.OP."=" 
0335 c0			        RET NZ                          ;FALSE, RETURN HL=0 
0336 6f			        LD L,A                          ;ELSE SET HL=1 
0337 c9			        RET 
0338			XP16: 
0338 cd 40 03		        CALL XP18                       ;REL.OP."<" 
033b d0			        RET NC                          ;FALSE, RETURN HL=0 
033c 6f			        LD L,A                          ;ELSE SET HL=1 
033d c9			        RET 
033e			XP17: 
033e e1			        POP HL                          ;NOT .REL.OP 
033f c9			        RET                             ;RETURN HL=<EXPR2> 
0340			XP18: 
0340 79			        LD A,C                          ;SUBROUTINE FOR ALL 
0341 e1			        POP HL                          ;REL.OP.'S 
0342 c1			        POP BC 
0343 e5			        PUSH HL                         ;REVERSE TOP OF STACK 
0344 c5			        PUSH BC 
0345 4f			        LD C,A 
0346 cd 55 03		        CALL EXPR2                      ;GET 2ND <EXPR2> 
0349 eb			        EX DE,HL                        ;VALUE IN DE NOW 
034a e3			        EX (SP),HL                      ;1ST <EXPR2> IN HL 
034b cd 72 04		        CALL CKHLDE                     ;COMPARE 1ST WITH 2ND 
034e d1			        POP DE                          ;RESTORE TEXT POINTER 
034f 21 00 00		        LD HL,0000H                     ;SET HL=0, A=1 
0352 3e 01		        LD A,01H 
0354 c9			        RET 
0355			EXPR2: 
0355 cf			        RST 08H                         ;NEGATIVE SIGN? 
0356 ..			        DB '-' 
0357 05			        DB XP21-$-1 
0358 21 00 00		        LD HL,0000H                     ;YES, FAKE '0-' 
035b 18 21		        JR XP26                         ;TREAT LIKE SUBTRACT 
035d			XP21: 
035d cf			        RST 08H                         ;POSITIVE SIGN? IGNORE 
035e ..			        DB '+' 
035f 00			        DB XP22-$-1 
0360			XP22: 
0360 cd 87 03		        CALL EXPR3                      ;1ST <EXPR3> 
0363			XP23: 
0363 cf			        RST 08H                         ;ADD? 
0364 ..			        DB  '+' 
0365 15			        DB XP25-$-1 
0366 e5			        PUSH HL                         ;YES, SAVE VALUE 
0367 cd 87 03		        CALL EXPR3                      ;GET 2ND <EXPR3> 
036a			XP24: 
036a eb			        EX DE,HL                        ;2ND IN DE 
036b e3			        EX (SP),HL                      ;1ST IN HL 
036c 7c			        LD A,H                          ;COMPARE SIGN 
036d aa			        XOR D 
036e 7a			        LD A,D 
036f 19			        ADD HL,DE 
0370 d1			        POP DE                          ;RESTORE TEXT POINTER 
0371 fa 63 03		        JP M,XP23                       ;1ST AND 2ND SIGN DIFFER 
0374 ac			        XOR H                           ;1ST AND 2ND SIGN EQUAL 
0375 f2 63 03		        JP P,XP23                       ;SO IS RESULT 
0378 c3 9b 00		        JP QHOW                         ;ELSE WE HAVE OVERFLOW 
037b			XP25: 
037b cf			        RST 08H                         ;SUBTRACT? 
037c ..			        DB '-' 
037d 7f			        DB XP42-$-1 
037e			XP26: 
037e e5			        PUSH HL                         ;YES, SAVE 1ST <EXPR3> 
037f cd 87 03		        CALL EXPR3                      ;GET 2ND <EXPR3> 
0382 cd 60 04		        CALL CHGSGN                     ;NEGATE 
0385 18 e3		        JR XP24                         ;AND ADD THEM 
0387			; 
0387			EXPR3: 
0387 cd e2 03		        CALL EXPR4                      ;GET 1ST <EXPR4> 
038a			XP31: 
038a cf			        RST 08H                         ;MULTIPLY? 
038b ..			        DB '*' 
038c 29			        DB XP34-$-1 
038d e5			        PUSH HL                         ;YES, SAVE 1ST 
038e cd e2 03		        CALL EXPR4                      ;AND GET 2ND <EXPR4> 
0391 06 00		        LD B,00H                        ;CLEAR B FOR SIGN 
0393 cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN 
0396 e3			        EX (SP),HL                      ;1ST IN HL 
0397 cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN OF 1ST 
039a eb			        EX DE,HL 
039b e3			        EX (SP),HL 
039c 7c			        LD A,H                          ;IS HL > 255 ? 
039d b7			        OR A 
039e 28 06		        JR Z,XP32                       ;NO 
03a0 7a			        LD A,D                          ;YES, HOW ABOUT DE 
03a1 b2			        OR D 
03a2 eb			        EX DE,HL                        ;PUT SMALLER IN HL 
03a3 c2 9c 00		        JP NZ,AHOW                      ;ALSO >, WILL OVERFLOW 
03a6			XP32: 
03a6 7d			        LD A,L                          ;THIS IS DUMB 
03a7 21 00 00		        LD HL,0000H                     ;CLEAR RESULT 
03aa b7			        OR A                            ;ADD AND COUNT 
03ab 28 28		        JR Z,XP35 
03ad			XP33: 
03ad 19			        ADD HL,DE 
03ae da 9c 00		        JP C,AHOW                       ;OVERFLOW 
03b1 3d			        DEC A 
03b2 20 f9		        JR NZ,XP33 
03b4 18 1f		        JR XP35                         ;FINISHED 
03b6			XP34: 
03b6 cf			        RST 08H                         ;DIVIDE? 
03b7 ..			        DB '/' 
03b8 44			        DB XP42-$-1 
03b9 e5			        PUSH HL                         ;YES, SAVE 1ST <EXPR4> 
03ba cd e2 03		        CALL EXPR4                      ;AND GET THE SECOND ONE 
03bd 06 00		        LD B,00H                        ;CLEAR B FOR SIGN 
03bf cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN OF 2ND 
03c2 e3			        EX (SP),HL                      ;GET 1ST IN HL 
03c3 cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN OF 1ST 
03c6 eb			        EX DE,HL 
03c7 e3			        EX (SP),HL 
03c8 eb			        EX DE,HL 
03c9 7a			        LD A,D                          ;DIVIDE BY 0? 
03ca b3			        OR E 
03cb ca 9c 00		        JP Z,AHOW                       ;SAY "HOW?" 
03ce c5			        PUSH BC                         ;ELSE SAVE SIGN 
03cf cd 41 04		        CALL DIVIDE                     ;USE SUBROUTINE 
03d2 60			        LD H,B                          ;RESULT IN HL NOW 
03d3 69			        LD L,C 
03d4 c1			        POP BC                          ;GET SIGN BACK 
03d5			XP35: 
03d5 d1			        POP DE                          ;AND TEXT POINTER 
03d6 7c			        LD A,H                          ;HL MUST BE + 
03d7 b7			        OR A 
03d8 fa 9b 00		        JP M,QHOW                       ;ELSE IT IS OVERFLOW 
03db 78			        LD A,B 
03dc b7			        OR A 
03dd fc 60 04		        CALL M,CHGSGN                   ;CHANGE SIGN IF NEEDED 
03e0 18 a8		        JR XP31                         ;LOOK FOR MORE TERMS 
03e2			EXPR4: 
03e2 21 f0 06		        LD HL,TAB4-1                    ;FIND FUNCTION IN TAB4 
03e5 c3 2a 07		        JP EXEC                         ;AND GO DO IT 
03e8			XP40: 
03e8 ff			        RST 38H                         ;NO, NOT A FUNCTION 
03e9 38 05		        JR C,XP41                       ;NOR A VARIABLE 
03eb 7e			        LD A,(HL)                       ;VARIABLE 
03ec 23			        INC HL 
03ed 66			        LD H,(HL)                       ;VALUE IN HL 
03ee 6f			        LD L,A 
03ef c9			        RET 
03f0			XP41: 
03f0 cd 74 00		        CALL TSTNUM                     ;OR IS IT A NUMBER 
03f3 78			        LD A,B                          ;# OF DIGIT 
03f4 b7			        OR A 
03f5 c0			        RET NZ                          ;OK 
03f6			PARN: 
03f6 cf			        RST 08H 
03f7 ..			        DB '(' 
03f8 05			        DB XP43-$-1 
03f9 df			        RST 18H                         ;"(EXPR)" 
03fa cf			        RST 08H 
03fb ..			        DB ')' 
03fc 01			        DB XP43-$-1 
03fd			XP42: 
03fd c9			        RET 
03fe			XP43: 
03fe c3 a0 04		        JP QWHAT                        ;ELSE SAY: "WHAT?" 
0401			RND: 
0401 cd f6 03		        CALL PARN                       ;*** RND(EXPR) *** 
0404 7c			        LD A,H                          ;EXPR MUST BE + 
0405 b7			        OR A 
0406 fa 9b 00		        JP M,QHOW 
0409 b5			        OR L                            ;AND NON-ZERO 
040a ca 9b 00		        JP Z,QHOW 
040d d5			        PUSH DE                         ;SAVE BOTH 
040e e5			        PUSH HL 
040f 2a 13 80		        LD HL,(RANPNT)                  ;GET MEMORY AS RANDOM 
0412 11 55 07		        LD DE,LSTROM                    ;NUMBER 
0415 e7			        RST 20H 
0416 38 03		        JR C,RA1                        ;WRAP AROUND IF LAST 
0418 21 00 00		        LD HL,START 
041b			RA1: 
041b 5e			        LD E,(HL) 
041c 23			        INC HL 
041d 56			        LD D,(HL) 
041e 22 13 80		        LD (RANPNT),HL 
0421 e1			        POP HL 
0422 eb			        EX DE,HL 
0423 c5			        PUSH BC 
0424 cd 41 04		        CALL DIVIDE                     ;RND (N)=MOD(M,N)+1 
0427 c1			        POP BC 
0428 d1			        POP DE 
0429 23			        INC HL 
042a c9			        RET 
042b			ABS: 
042b cd f6 03		        CALL PARN                       ;*** ABS (EXPR) *** 
042e 1b			        DEC DE 
042f cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN 
0432 13			        INC DE 
0433 c9			        RET 
0434			SIZE: 
0434 2a 15 80		        LD HL,(TXTUNF)                  ;*** SIZE *** 
0437 d5			        PUSH DE                         ;GET THE NUMBER OF FREE 
0438 eb			        EX DE,HL                        ;BYTES BETWEEN 'TXTUNF' 
0439 21 00 ff		        LD HL,VARBGN                    ;AND 'VARBGN' 
043c cd 56 04		        CALL SUBDE 
043f d1			        POP DE 
0440 c9			        RET 
0441			;************************************************************* 
0441			; 
0441			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE *** 
0441			; 
0441			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL 
0441			; 
0441			; 'SUBDE' SUBSTRACTS DE FROM HL 
0441			; 
0441			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE 
0441			; SIGN AND FLIP SIGN OF B. 
0441			; 
0441			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY. 
0441			; 
0441			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE 
0441			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER 
0441			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS. 
0441			;************************************************************* 
0441			 
0441			DIVIDE: 
0441 e5			        PUSH HL                         ;*** DIVIDE *** 
0442 6c			        LD L,H                          ;DIVIDE H BY DE 
0443 26 00		        LD H,00H 
0445 cd 4c 04		        CALL DV1 
0448 41			        LD B,C                          ;SAVE RESULT IN B 
0449 7d			        LD A,L                          ;(REMAINDER+L)/DE 
044a e1			        POP HL 
044b 67			        LD H,A 
044c			DV1: 
044c 0e ff		        LD C,0FFH                       ;RESULT IN C 
044e			DV2: 
044e 0c			        INC C                           ;DUMB ROUTINE 
044f cd 56 04		        CALL SUBDE                      ;DIVIDE BY SUBTRACT 
0452 30 fa		        JR NC,DV2                       ;AND COUNT 
0454 19			        ADD HL,DE 
0455 c9			        RET 
0456			SUBDE: 
0456 7d			        LD A,L                          ;*** SUBDE *** 
0457 93			        SUB E                           ;SUBSTRACT DE FROM 
0458 6f			        LD L,A                          ;HL 
0459 7c			        LD A,H 
045a 9a			        SBC A,D 
045b 67			        LD H,A 
045c c9			        RET 
045d			CHKSGN: 
045d 7c			        LD A,H                          ;*** CHKSGN *** 
045e b7			        OR A                            ;CHECK SIGN OF HL 
045f f0			        RET P 
0460			CHGSGN: 
0460 7c			        LD A,H                          ;*** CHGSGN *** 
0461 f5			        PUSH AF 
0462 2f			        CPL                             ;CHANGE SIGN OF HL 
0463 67			        LD H,A 
0464 7d			        LD A,L 
0465 2f			        CPL 
0466 6f			        LD L,A 
0467 23			        INC HL 
0468 f1			        POP AF 
0469 ac			        XOR H 
046a f2 9b 00		        JP P,QHOW 
046d 78			        LD A,B                          ;AND ALSO FLIP B 
046e ee 80		        XOR 80H 
0470 47			        LD B,A 
0471 c9			        RET 
0472			CKHLDE: 
0472 7c			        LD A,H                          ;SAME SIGN? 
0473 aa			        XOR D                           ;YES, COMPARE 
0474 f2 78 04		        JP P,CK1                        ;NO, XCHANGE AND COMP 
0477 eb			        EX DE,HL 
0478			CK1: 
0478 e7			        RST 20H 
0479 c9			        RET 
047a			;************************************************************* 
047a			; 
047a			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) *** 
047a			; 
047a			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND 
047a			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE 
047a			; TO THAT VALUE. 
047a			; 
047a			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";", 
047a			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE 
047a			; NEXT LINE AND CONTINUE FROM THERE. 
047a			; 
047a			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS 
047a			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.) 
047a			; 
047a			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR). 
047a			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?" 
047a			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP 
047a			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED 
047a			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO 
047a			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT 
047a			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT' 
047a			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS 
047a			; NOT TERMINATED BUT CONTINUED AT 'INPERR'. 
047a			; 
047a			; RELATED TO 'ERROR' ARE THE FOLLOWING: 
047a			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?" 
047a			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'. 
047a			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING. 
047a			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS. 
047a			;************************************************************* 
047a			 
047a			SETVAL: 
047a ff			        RST 38H                         ;*** SETVAL *** 
047b da a0 04		        JP C,QWHAT                      ;"WHAT?" NO VARIABLE 
047e e5			        PUSH HL                         ;SAVE ADDRESS OF VAR. 
047f cf			        RST 08H                         ;PASS "=" SIGN 
0480 ..			        DB '=' 
0481 08			        DB SV1-$-1 
0482 df			        RST 18H                         ;EVALUATE EXPR. 
0483 44			        LD B,H                          ;VALUE IS IN BC NOW 
0484 4d			        LD C,L 
0485 e1			        POP HL                          ;GET ADDRESS 
0486 71			        LD (HL),C                       ;SAVE VALUE 
0487 23			        INC HL 
0488 70			        LD (HL),B 
0489 c9			        RET 
048a			SV1: 
048a c3 a0 04		        JP QWHAT                        ;NO "=" SIGN 
048d			FIN: 
048d cf			        RST 08H                         ;*** FIN *** 
048e 3b			        DB 3BH 
048f 04			        DB FI1-$-1 
0490 f1			        POP AF                          ;";", PURGE RET. ADDR. 
0491 c3 50 01		        JP RUNSML                       ;CONTINUE SAME LINE 
0494			FI1: 
0494 cf			        RST 08H                         ;NOT ";", IS IT CR? 
0495 0d			        DB CR 
0496 04			        DB FI2-$-1 
0497 f1			        POP AF                          ;YES, PURGE RET. ADDR. 
0498 c3 40 01		        JP RUNNXL                       ;RUN NEXT LINE 
049b			FI2: 
049b c9			        RET                             ;ELSE RETURN TO CALLER 
049c			ENDCHK: 
049c ef			        RST 28H                         ;*** ENDCHK *** 
049d fe 0d		        CP CR                           ;END WITH CR? 
049f c8			        RET Z                           ;OK, ELSE SAY: "WHAT?" 
04a0			QWHAT: 
04a0 d5			        PUSH DE                         ;*** QWHAT *** 
04a1			AWHAT: 
04a1 11 aa 00		        LD DE,WHAT                      ;*** AWHAT *** 
04a4			ERROR_ROUTINE: 
04a4 97			        SUB A                           ;*** ERROR *** 
04a5 cd 2d 05		        CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?' 
04a8 d1			        POP DE                          ;OR 'SORRY' 
04a9 1a			        LD A,(DE)                       ;SAVE THE CHARACTER 
04aa f5			        PUSH AF                         ;AT WHERE OLD DE -> 
04ab 97			        SUB A                           ;AND PUT A 0 THERE 
04ac 12			        LD (DE),A 
04ad 2a 01 80		        LD HL,(CURRNT)                  ;GET CURRENT LINE # 
04b0 e5			        PUSH HL 
04b1 7e			        LD A,(HL)                       ;CHECK THE VALUE 
04b2 23			        INC HL 
04b3 b6			        OR (HL) 
04b4 d1			        POP DE 
04b5 ca b6 00		        JP Z,RSTART                     ;IF ZERO, JUST RESTART 
04b8 7e			        LD A,(HL)                       ;IF NEGATIVE, 
04b9 b7			        OR A 
04ba fa ad 02		        JP M,INPERR                     ;REDO INPUT 
04bd cd 97 05		        CALL PRTLN                      ;ELSE PRINT THE LINE 
04c0 1b			        DEC DE                          ;UPTO WHERE THE 0 IS 
04c1 f1			        POP AF                          ;RESTORE THE CHARACTER 
04c2 12			        LD (DE),A 
04c3 3e 3f		        LD A,3FH                        ;PRINT A "?" 
04c5 d7			        RST 10H 
04c6 97			        SUB A                           ;AND THE REST OF THE 
04c7 cd 2d 05		        CALL PRTSTG                     ;LINE 
04ca c3 b6 00		        JP RSTART                       ;THEN RESTART 
04cd			QSORRY: 
04cd d5			        PUSH DE                         ;*** QSORRY *** 
04ce			ASORRY: 
04ce 11 b0 00		        LD DE,SORRY                     ;*** ASORRY *** 
04d1 18 d1		        JR ERROR_ROUTINE 
04d3			;************************************************************* 
04d3			; 
04d3			; *** GETLN *** FNDLN (& FRIENDS) *** 
04d3			; 
04d3			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT 
04d3			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS 
04d3			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL 
04d3			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE 
04d3			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO 
04d3			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER. 
04d3			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN. 
04d3			; 
04d3			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE 
04d3			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE 
04d3			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE 
04d3			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z. 
04d3			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE # 
04d3			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF 
04d3			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE 
04d3			; LINE, FLAGS ARE C & NZ. 
04d3			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE 
04d3			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS 
04d3			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH. 
04d3			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #. 
04d3			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH. 
04d3			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH. 
04d3			;************************************************************* 
04d3			 
04d3			GETLN: 
04d3 d7			        RST 10H                         ;*** GETLN *** 
04d4 11 37 ff		        LD DE,BUFFER                    ;PROMPT AND INIT. 
04d7			GL1: 
04d7 cd 41 06		        CALL CHKIO                      ;CHECK KEYBOARD 
04da 28 fb		        JR Z,GL1                        ;NO INPUT, WAIT 
04dc fe 7f		        CP 7FH                          ;DELETE LAST CHARACTER? 
04de 28 16		        JR Z,GL3                        ;YES 
04e0 d7			        RST 10H                         ;INPUT, ECHO BACK 
04e1 fe 0a		        CP 0AH                          ;IGNORE LF 
04e3 28 f2		        JR Z,GL1 
04e5 b7			        OR A                            ;IGNORE NULL 
04e6 28 ef		        JR Z,GL1 
04e8 fe 7d		        CP 7DH                          ;DELETE THE WHOLE LINE? 
04ea 28 15		        JR Z,GL4                        ;YES 
04ec 12			        LD (DE),A                       ;ELSE SAVE INPUT 
04ed 13			        INC DE                          ;AND BUMP POINTER 
04ee fe 0d		        CP 0DH                          ;WAS IT CR 
04f0 c8			        RET Z                           ;YES, END OF LINE 
04f1 7b			        LD A,E                          ;ELSE MORE FREE ROOM? 
04f2 fe 77		        CP BUFEND & 0FFH 
04f4 20 e1		        JR NZ,GL1                       ;YES, GET NEXT INPUT 
04f6			GL3: 
04f6 7b			        LD A,E                          ;DELETE LAST CHARACTER 
04f7 fe 37		        CP BUFFER & 0FFH                ;BUT DO WE HAVE ANY? 
04f9 28 06		        JR Z,GL4                        ;NO, REDO WHOLE LINE 
04fb 1b			        DEC DE                          ;YES, BACKUP POINTER 
04fc 3e 5c		        LD A,5CH                        ;AND ECHO A BACK-SLASH 
04fe d7			        RST 10H 
04ff 18 d6		        JR GL1                          ;GO GET NEXT INPUT 
0501			GL4: 
0501 cd 0e 00		        CALL CRLF                       ;REDO ENTIRE LINE 
0504 3e 5e		        LD A,05EH                       ;CR, LF AND UP-ARROW 
0506 18 cb		        JR GETLN 
0508			FNDLN: 
0508 7c			        LD A,H                          ;*** FNDLN *** 
0509 b7			        OR A                            ;CHECK SIGN OF HL 
050a fa 9b 00		        JP M,QHOW                       ;IT CANNOT BE - 
050d 11 17 80		        LD DE,TXTBGN                    ;INIT TEXT POINTER 
0510			FNDLP:                                  ;*** FDLNP *** 
0510			FL1: 
0510 e5			        PUSH HL                         ;SAVE LINE # 
0511 2a 15 80		        LD HL,(TXTUNF)                  ;CHECK IF WE PASSED END 
0514 2b			        DEC HL 
0515 e7			        RST 20H 
0516 e1			        POP HL                          ;GET LINE # BACK 
0517 d8			        RET C                           ;C,NZ PASSED END 
0518 1a			        LD A,(DE)                       ;WE DID NOT, GET BYTE 1 
0519 95			        SUB L                           ;IS THIS THE LINE? 
051a 47			        LD B,A                          ;COMPARE LOW ORDER 
051b 13			        INC DE 
051c 1a			        LD A,(DE)                       ;GET BYTE 2 
051d 9c			        SBC A,H                         ;COMPARE HIGH ORDER 
051e 38 04		        JR C,FL2                        ;NO, NOT THERE YET 
0520 1b			        DEC DE                          ;ELSE WE EITHER FOUND 
0521 b0			        OR B                            ;IT, OR IT IS NOT THERE 
0522 c9			        RET                             ;NC,Z;FOUND, NC,NZ:NO 
0523			FNDNXT:                                 ;*** FNDNXT *** 
0523 13			        INC DE                          ;FIND NEXT LINE 
0524			FL2: 
0524 13			        INC DE                          ;JUST PASSED BYTE 1 & 2 
0525			FNDSKP: 
0525 1a			        LD A,(DE)                       ;*** FNDSKP *** 
0526 fe 0d		        CP CR                           ;TRY TO FIND CR 
0528 20 fa		        JR NZ,FL2                       ;KEEP LOOKING 
052a 13			        INC DE                          ;FOUND CR, SKIP OVER 
052b 18 e3		        JR FL1                          ;CHECK IF END OF TEXT 
052d			;************************************************************* 
052d			; 
052d			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN *** 
052d			; 
052d			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING 
052d			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN 
052d			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE 
052d			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST. 
052d			; 
052d			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE 
052d			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW, 
052d			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT 
052d			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE. 
052d			; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED 
052d			; OVER (USUALLY A JUMP INSTRUCTION. 
052d			; 
052d			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED 
052d			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C. 
052d			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN 
052d			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO 
052d			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT. 
052d			; 
052d			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL. 
052d			;************************************************************* 
052d			 
052d			PRTSTG: 
052d 47			        LD B,A                          ;*** PRTSTG *** 
052e			PS1: 
052e 1a			        LD A,(DE)                       ;GET A CHARACTER 
052f 13			        INC DE                          ;BUMP POINTER 
0530 b8			        CP B                            ;SAME AS OLD A? 
0531 c8			        RET Z                           ;YES, RETURN 
0532 d7			        RST 10H                         ;NO, NEXT 
0533 fe 0d		        CP CR                           ;WAS IT A CR? 
0535 20 f7		        JR NZ,PS1                       ;NO, NEXT 
0537 c9			        RET                             ;YES, RETURN 
0538			QTSTG: 
0538 cf			        RST 08H                         ;*** QTSTG *** 
0539 22			        DB 22H 
053a 0e			        DB QT3-$-1 
053b 3e 22		        LD A,22H                        ;IT IS A " 
053d			QT1: 
053d cd 2d 05		        CALL PRTSTG                     ;PRINT UNTIL ANOTHER 
0540 fe 0d		        CP CR                           ;WAS LAST ONE A CR? 
0542 e1			        POP HL                          ;RETURN ADDRESS 
0543 ca 40 01		        JP Z,RUNNXL                     ;WAS CR, RUN NEXT LINE 
0546			QT2: 
0546 23			        INC HL                          ;SKIP 2 BYTES ON RETURN 
0547 23			        INC HL 
0548 e9			        JP (HL)                         ;RETURN 
0549			QT3: 
0549 cf			        RST 08H                         ;IS IT A '? 
054a 27			        DB 27H 
054b 04			        DB QT4-$-1 
054c 3e 27		        LD A,27H                        ;YES, DO THE SAME 
054e 18 ed		        JR QT1                          ;AS IN " 
0550			QT4: 
0550 cf			        RST 08H                         ;IS IT BACK-ARROW? 
0551 5f			        DB 5FH 
0552 07			        DB QT5-$-1 
0553 3e 0d		        LD A,0DH                        ;YES, CR WITHOUT LF 
0555 d7			        RST 10H                         ;DO IT TWICE TO GIVE 
0556 d7			        RST 10H                         ;TTY ENOUGH TIME 
0557 e1			        POP HL                          ;RETURN ADDRESS 
0558 18 ec		        JR QT2 
055a			QT5: 
055a c9			        RET                             ;NONE OF ABOVE 
055b			; 
055b			PRTNUM: 
055b 06 00		        LD B,00H                        ;*** PRTNUM *** 
055d cd 5d 04		        CALL CHKSGN                     ;CHECK SIGN 
0560 f2 66 05		        JP P,PN1                        ;NO SIGN 
0563 06 2d		        LD B,'-'                        ;B=SIGN 
0565 0d			        DEC C                           ;'-' TAKES SPACE 
0566			PN1: 
0566 d5			        PUSH DE                         ;SAVE 
0567 11 0a 00		        LD DE,000AH                     ;DECIMAL 
056a d5			        PUSH DE                         ;SAVE AS FLAG 
056b 0d			        DEC C                           ;C=SPACES 
056c c5			        PUSH BC                         ;SAVE SIGN & SPACE 
056d			PN2: 
056d cd 41 04		        CALL DIVIDE                     ;DIVIDE HL BY 10 
0570 78			        LD A,B                          ;RESULT 0? 
0571 b1			        OR C 
0572 28 07		        JR Z,PN3                        ;YES, WE GOT ALL 
0574 e3			        EX (SP),HL                      ;NO, SAVE REMAINDER 
0575 2d			        DEC L                           ;AND COUNT SPACE 
0576 e5			        PUSH HL                         ;HL IS OLD BC 
0577 60			        LD H,B                          ;MOVE RESULT TO BC 
0578 69			        LD L,C 
0579 18 f2		        JR PN2                          ;AND DIVIDE BY 10 
057b			PN3: 
057b c1			        POP BC                          ;WE GOT ALL DIGITS IN 
057c			PN4: 
057c 0d			        DEC C                           ;THE STACK 
057d 79			        LD A,C                          ;LOOK AT SPACE COUNT 
057e b7			        OR A 
057f fa 87 05		        JP M,PN5                        ;NO LEADING BLANKS 
0582 3e 20		        LD A,20H                        ;LEADING BLANKS 
0584 d7			        RST 10H 
0585 18 f5		        JR PN4                          ;MORE? 
0587			PN5: 
0587 78			        LD A,B                          ;PRINT SIGN 
0588 b7			        OR A 
0589 c4 10 00		        CALL NZ,0010H 
058c 5d			        LD E,L                          ;LAST REMAINDER IN E 
058d			PN6: 
058d 7b			        LD A,E                          ;CHECK DIGIT IN E 
058e fe 0a		        CP 0AH                          ;10 IS FLAG FOR NO MORE 
0590 d1			        POP DE 
0591 c8			        RET Z                           ;IF SO, RETURN 
0592 c6 30		        ADD A,30H                       ;ELSE, CONVERT TO ASCII 
0594 d7			        RST 10H                         ;PRINT THE DIGIT 
0595 18 f6		        JR PN6                          ;GO BACK FOR MORE 
0597			PRTLN: 
0597 1a			        LD A,(DE)                       ;*** PRTLN *** 
0598 6f			        LD L,A                          ;LOW ORDER LINE # 
0599 13			        INC DE 
059a 1a			        LD A,(DE)                       ;HIGH ORDER 
059b 67			        LD H,A 
059c 13			        INC DE 
059d 0e 04		        LD C,04H                        ;PRINT 4 DIGIT LINE # 
059f cd 5b 05		        CALL PRTNUM 
05a2 3e 20		        LD A,20H                        ;FOLLOWED BY A BLANK 
05a4 d7			        RST 10H 
05a5 97			        SUB A                           ;AND THEN THE NEXT 
05a6 cd 2d 05		        CALL PRTSTG 
05a9 c9			        RET 
05aa			;************************************************************* 
05aa			; 
05aa			; *** MVUP *** MVDOWN *** POPA *** & PUSHA *** 
05aa			; 
05aa			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL 
05aa			; DE = HL 
05aa			; 
05aa			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL-> 
05aa			; UNTIL DE = BC 
05aa			; 
05aa			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE 
05aa			; STACK 
05aa			; 
05aa			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE 
05aa			; STACK 
05aa			;************************************************************* 
05aa			 
05aa			MVUP: 
05aa e7			        RST 20H                         ;*** MVUP *** 
05ab c8			        RET Z                           ;DE = HL, RETURN 
05ac 1a			        LD A,(DE)                       ;GET ONE BYTE 
05ad 02			        LD (BC),A                       ;MOVE IT 
05ae 13			        INC DE                          ;INCREASE BOTH POINTERS 
05af 03			        INC BC 
05b0 18 f8		        JR MVUP                         ;UNTIL DONE 
05b2			MVDOWN: 
05b2 78			        LD A,B                          ;*** MVDOWN *** 
05b3 92			        SUB D                           ;TEST IF DE = BC 
05b4 c2 ba 05		        JP NZ,MD1                       ;NO, GO MOVE 
05b7 79			        LD A,C                          ;MAYBE, OTHER BYTE? 
05b8 93			        SUB E 
05b9 c8			        RET Z                           ;YES, RETURN 
05ba			MD1: 
05ba 1b			        DEC DE                          ;ELSE MOVE A BYTE 
05bb 2b			        DEC HL                          ;BUT FIRST DECREASE 
05bc 1a			        LD A,(DE)                       ;BOTH POINTERS AND 
05bd 77			        LD (HL),A                       ;THEN DO IT 
05be 18 f2		        JR MVDOWN                       ;LOOP BACK 
05c0			POPA: 
05c0 c1			        POP BC                          ;BC = RETURN ADDR. 
05c1 e1			        POP HL                          ;RESTORE LOPVAR, BUT 
05c2 22 09 80		        LD (LOPVAR),HL                  ;=0 MEANS NO MORE 
05c5 7c			        LD A,H 
05c6 b5			        OR L 
05c7 28 10		        JR Z,PP1                        ;YEP, GO RETURN 
05c9 e1			        POP HL                          ;NOP, RESTORE OTHERS 
05ca 22 0b 80		        LD (LOPINC),HL 
05cd e1			        POP HL 
05ce 22 0d 80		        LD (LOPLMT),HL 
05d1 e1			        POP HL 
05d2 22 0f 80		        LD (LOPLN),HL 
05d5 e1			        POP HL 
05d6 22 11 80		        LD (LOPPT),HL 
05d9			PP1: 
05d9 c5			        PUSH BC                         ;BC = RETURN ADDR. 
05da c9			        RET 
05db			PUSHA: 
05db 21 78 ff		        LD HL,STKLMT                    ;*** PUSHA *** 
05de cd 60 04		        CALL CHGSGN 
05e1 c1			        POP BC                          ;BC=RETURN ADDRESS 
05e2 39			        ADD HL,SP                       ;IS STACK NEAR THE TOP? 
05e3 d2 cd 04		        JP NC,QSORRY                    ;YES, SORRY FOR THAT 
05e6 2a 09 80		        LD HL,(LOPVAR)                  ;ELSE SAVE LOOP VAR'S 
05e9 7c			        LD A,H                          ;BUT IF LOPVAR IS 0 
05ea b5			        OR L                            ;THAT WILL BE ALL 
05eb 28 13		        JR Z,PU1 
05ed 2a 11 80		        LD HL,(LOPPT)                   ;ELSE, MORE TO SAVE 
05f0 e5			        PUSH HL 
05f1 2a 0f 80		        LD HL,(LOPLN) 
05f4 e5			        PUSH HL 
05f5 2a 0d 80		        LD HL,(LOPLMT) 
05f8 e5			        PUSH HL 
05f9 2a 0b 80		        LD HL,(LOPINC) 
05fc e5			        PUSH HL 
05fd 2a 09 80		        LD HL,(LOPVAR) 
0600			PU1: 
0600 e5			        PUSH HL 
0601 c5			        PUSH BC                         ;BC = RETURN ADDR. 
0602 c9			        RET 
0603			;************************************************************* 
0603			; 
0603			; *** OUTC *** & CHKIO *** 
0603			; 
0603			; THESE ARE THE ONLY I/O ROUTINES IN TBI. 
0603			; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0 
0603			; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0, 
0603			; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO 
0603			; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG. 
0603			; ARE RESTORED. 
0603			; 
0603			; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO 
0603			; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG 
0603			; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE 
0603			; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND 
0603			; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL 
0603			; RESTART TBI AND DO NOT RETURN TO THE CALLER. 
0603			; 
0603			; Do not modify these routines.  Routines requiring 
0603			; modification are : SERIAL_INIT, RX_RDY, and TX_RDY. 
0603			;************************************************************* 
0603			 
0603			INIT: 
0603 32 00 80		        LD (OCSW),A             ;ENSURE OUTPUT IS ON 
0606 cd 52 07		        CALL SERIAL_INIT        ;INITIALIZE THE SIO 
0609 16 19		        LD D,19H 
060b			PATLOP: 
060b cd 0e 00		        CALL CRLF 
060e 15			        DEC D 
060f 20 fa		        JR NZ,PATLOP 
0611 97			        SUB A 
0612 11 65 06		        LD DE,MSG1          ;PRINT THE BOOT MESSAGES 
0615 cd 2d 05		        CALL PRTSTG 
0618 97			        SUB A 
0619 11 80 06		        LD DE,MSG2 
061c cd 2d 05		        CALL PRTSTG 
061f 21 00 00		        LD HL,START 
0622 22 13 80		        LD (RANPNT),HL 
0625 21 17 80		        LD HL,TXTBGN 
0628 22 15 80		        LD (TXTUNF),HL 
062b c3 b6 00		        JP RSTART 
062e			OUTC: 
062e 20 02		        JR NZ,OUTC2         ;IT IS ON 
0630 f1			        POP AF                          ;IT IS OFF 
0631 c9			        RET                             ;RESTORE AF AND RETURN 
0632			OUTC2: 
0632 cd 53 07		        CALL TX_RDY         ;SEE IF TRANSMIT IS AVAILABLE 
0635 f1			        POP AF                          ;RESTORE THE REGISTER 
0636 d3 00		        OUT (SerialPort),A      ;SEND THE BYTE 
0638 fe 0d		        CP CR 
063a c0			        RET NZ 
063b 3e 0a		        LD A,LF 
063d d7			        RST 10H 
063e 3e 0d		        LD A,CR 
0640 c9			        RET 
0641			CHKIO: 
0641 cd 54 07		        CALL RX_RDY         ;CHECK IF CHARACTER AVAILABLE 
0644 c8			        RET Z                           ;RETURN IF NO CHARACTER AVAILABLE 
0645			 
0645 c5			        PUSH BC                         ;IF IT'S A LF, IGNORE AND RETURN 
0646 47			        LD B,A                          ; AS IF THERE WAS NO CHARACTER. 
0647 d6 0a		        SUB LF 
0649 28 0f		        JR Z,CHKIO2 
064b 78			        LD A,B                          ;OTHERWISE RESTORE 'A' AND 'BC' 
064c c1			        POP BC                          ; AND CONTINUE ON. 
064d			 
064d fe 0f		        CP 0FH                          ;IS IT CONTROL-0? 
064f 20 0e		        JR NZ,CI1                       ;NO, MORE CHECKING 
0651 3a 00 80		        LD A,(OCSW)                     ;CONTROL-0 FLIPS OCSW 
0654 2f			        CPL                             ;ON TO OFF, OFF TO ON 
0655 32 00 80		        LD (OCSW),A 
0658 18 e7		        JR CHKIO                        ;GET ANOTHER INPUT 
065a			CHKIO2: 
065a 3e 00		        LD A,00H                        ;CLEAR A 
065c b7			        OR A                            ;ZET THE Z-FLAG 
065d c1			        POP BC                          ;RESTORE THE 'BC' PAIR 
065e c9			        RET                             ;RETURN WITH 'Z' SET. 
065f			CI1: 
065f fe 03		        CP 03H                          ;IS IT CONTROL-C? 
0661 c0			        RET NZ                          ;NO, RETURN "NZ" 
0662 c3 b6 00		        JP RSTART                       ;YES, RESTART TBI 
0665			 
0665			 
0665 1b .. 1b ..	MSG1:   DB   ESC,"[2J",ESC,"[H"         ;SCREEN CLEAR 
066c .. 0d		        DB   'Z80 TINY BASIC 2.0g',CR       ;BOOT MESSAGE 
0680 .. 0d		MSG2:   DB   'PORTED BY DOUG GABBARD, 2017',CR 
069d			 
069d			;************************************************************* 
069d			; 
069d			; *** TABLES *** DIRECT *** & EXEC *** 
069d			; 
069d			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE. 
069d			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION 
069d			; OF CODE ACCORDING TO THE TABLE. 
069d			; 
069d			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT 
069d			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING. 
069d			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF 
069d			; ALL DIRECT AND STATEMENT COMMANDS. 
069d			; 
069d			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL 
069d			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.', 
069d			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'. 
069d			; 
069d			; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM 
069d			; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND 
069d			; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH 
069d			; BYTE SET TO 1. 
069d			; 
069d			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE 
069d			; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL 
069d			; MATCH THIS NULL ITEM AS DEFAULT. 
069d			;************************************************************* 
069d			 
069d			TAB1:                                   ;DIRECT COMMANDS 
069d ..			        DB 'LIST' 
06a1			        DWA LIST 
06a1 81			        DB   (LIST >> 8) + 128 
06a2 67			        DB   LIST & 0FFH 
06a3			        ENDM 
# End of macro DWA
06a3 ..			        DB 'RUN' 
06a6			        DWA RUN 
06a6 81			        DB   (RUN >> 8) + 128 
06a7 3a			        DB   RUN & 0FFH 
06a8			        ENDM 
# End of macro DWA
06a8 ..			        DB 'NEW' 
06ab			        DWA NEW 
06ab 81			        DB   (NEW >> 8) + 128 
06ac 2b			        DB   NEW & 0FFH 
06ad			        ENDM 
# End of macro DWA
06ad			TAB2:                                   ;DIRECT/STATEMENT 
06ad ..			        DB 'NEXT' 
06b1			        DWA NEXT 
06b1 82			        DB   (NEXT >> 8) + 128 
06b2 43			        DB   NEXT & 0FFH 
06b3			        ENDM 
# End of macro DWA
06b3 ..			        DB 'LET' 
06b6			        DWA LET 
06b6 83			        DB   (LET >> 8) + 128 
06b7 08			        DB   LET & 0FFH 
06b8			        ENDM 
# End of macro DWA
06b8 ..			        DB 'IF' 
06ba			        DWA IFF 
06ba 82			        DB   (IFF >> 8) + 128 
06bb 9e			        DB   IFF & 0FFH 
06bc			        ENDM 
# End of macro DWA
06bc ..			        DB 'GOTO' 
06c0			        DWA GOTO 
06c0 81			        DB   (GOTO >> 8) + 128 
06c1 59			        DB   GOTO & 0FFH 
06c2			        ENDM 
# End of macro DWA
06c2 ..			        DB 'GOSUB' 
06c7			        DWA GOSUB 
06c7 81			        DB   (GOSUB >> 8) + 128 
06c8 b0			        DB   GOSUB & 0FFH 
06c9			        ENDM 
# End of macro DWA
06c9 ..			        DB 'RETURN' 
06cf			        DWA RETURN 
06cf 81			        DB   (RETURN >> 8) + 128 
06d0 d0			        DB   RETURN & 0FFH 
06d1			        ENDM 
# End of macro DWA
06d1 ..			        DB 'REM' 
06d4			        DWA REM 
06d4 82			        DB   (REM >> 8) + 128 
06d5 99			        DB   REM & 0FFH 
06d6			        ENDM 
# End of macro DWA
06d6 ..			        DB 'FOR' 
06d9			        DWA FOR 
06d9 81			        DB   (FOR >> 8) + 128 
06da e9			        DB   FOR & 0FFH 
06db			        ENDM 
# End of macro DWA
06db ..			        DB 'INPUT' 
06e0			        DWA INPUT 
06e0 82			        DB   (INPUT >> 8) + 128 
06e1 b7			        DB   INPUT & 0FFH 
06e2			        ENDM 
# End of macro DWA
06e2 ..			        DB 'PRINT' 
06e7			        DWA PRINT 
06e7 81			        DB   (PRINT >> 8) + 128 
06e8 7e			        DB   PRINT & 0FFH 
06e9			        ENDM 
# End of macro DWA
06e9 ..			        DB 'STOP' 
06ed			        DWA STOP 
06ed 81			        DB   (STOP >> 8) + 128 
06ee 34			        DB   STOP & 0FFH 
06ef			        ENDM 
# End of macro DWA
06ef			        DWA DEFLT 
06ef 83			        DB   (DEFLT >> 8) + 128 
06f0 03			        DB   DEFLT & 0FFH 
06f1			        ENDM 
# End of macro DWA
06f1			TAB4:                                   ;FUNCTIONS 
06f1 ..			        DB 'RND' 
06f4			        DWA RND 
06f4 84			        DB   (RND >> 8) + 128 
06f5 01			        DB   RND & 0FFH 
06f6			        ENDM 
# End of macro DWA
06f6 ..			        DB 'ABS' 
06f9			        DWA ABS 
06f9 84			        DB   (ABS >> 8) + 128 
06fa 2b			        DB   ABS & 0FFH 
06fb			        ENDM 
# End of macro DWA
06fb ..			        DB 'SIZE' 
06ff			        DWA SIZE 
06ff 84			        DB   (SIZE >> 8) + 128 
0700 34			        DB   SIZE & 0FFH 
0701			        ENDM 
# End of macro DWA
0701			        DWA XP40 
0701 83			        DB   (XP40 >> 8) + 128 
0702 e8			        DB   XP40 & 0FFH 
0703			        ENDM 
# End of macro DWA
0703			TAB5:                                   ;"TO" IN "FOR" 
0703 ..			        DB 'TO' 
0705			        DWA FR1 
0705 81			        DB   (FR1 >> 8) + 128 
0706 f9			        DB   FR1 & 0FFH 
0707			        ENDM 
# End of macro DWA
0707			        DWA QWHAT 
0707 84			        DB   (QWHAT >> 8) + 128 
0708 a0			        DB   QWHAT & 0FFH 
0709			        ENDM 
# End of macro DWA
0709			TAB6:                                   ;"STEP" IN "FOR" 
0709 ..			        DB 'STEP' 
070d			        DWA FR2 
070d 82			        DB   (FR2 >> 8) + 128 
070e 03			        DB   FR2 & 0FFH 
070f			        ENDM 
# End of macro DWA
070f			        DWA FR3 
070f 82			        DB   (FR3 >> 8) + 128 
0710 06			        DB   FR3 & 0FFH 
0711			        ENDM 
# End of macro DWA
0711			TAB8:                                   ;RELATION OPERATORS 
0711 ..			        DB '>=' 
0713			        DWA XP11 
0713 83			        DB   (XP11 >> 8) + 128 
0714 17			        DB   XP11 & 0FFH 
0715			        ENDM 
# End of macro DWA
0715 ..			        DB '#' 
0716			        DWA XP12 
0716 83			        DB   (XP12 >> 8) + 128 
0717 1d			        DB   XP12 & 0FFH 
0718			        ENDM 
# End of macro DWA
0718 ..			        DB '>' 
0719			        DWA XP13 
0719 83			        DB   (XP13 >> 8) + 128 
071a 23			        DB   XP13 & 0FFH 
071b			        ENDM 
# End of macro DWA
071b ..			        DB '=' 
071c			        DWA XP15 
071c 83			        DB   (XP15 >> 8) + 128 
071d 32			        DB   XP15 & 0FFH 
071e			        ENDM 
# End of macro DWA
071e ..			        DB '<=' 
0720			        DWA XP14 
0720 83			        DB   (XP14 >> 8) + 128 
0721 2a			        DB   XP14 & 0FFH 
0722			        ENDM 
# End of macro DWA
0722 ..			        DB '<' 
0723			        DWA XP16 
0723 83			        DB   (XP16 >> 8) + 128 
0724 38			        DB   XP16 & 0FFH 
0725			        ENDM 
# End of macro DWA
0725			        DWA XP17 
0725 83			        DB   (XP17 >> 8) + 128 
0726 3e			        DB   XP17 & 0FFH 
0727			        ENDM 
# End of macro DWA
0727 21 9c 06		DIRECT: LD HL,TAB1-1                   ;*** DIRECT *** 
072a			EXEC:                                   ;*** EXEC *** 
072a ef			EX0:    RST 28H                         ;IGNORE LEADING BLANKS 
072b d5			        PUSH DE                         ;SAVE POINTER 
072c			EX1: 
072c 1a			        LD A,(DE)                       ;IF FOUND '.' IN STRING 
072d 13			        INC DE                          ;BEFORE ANY MISMATCH 
072e fe 2e		        CP 2EH                          ;WE DECLARE A MATCH 
0730 28 12		        JR Z,EX3 
0732 23			        INC HL                          ;HL->TABLE 
0733 be			        CP (HL)                         ;IF MATCH, TEST NEXT 
0734 28 f6		        JR Z,EX1 
0736 3e 7f		        LD A,7FH                        ;ELSE SEE IF BIT 7 
0738 1b			        DEC DE                          ;OF TABLE IS SET, WHICH 
0739 be			        CP (HL)                         ;IS THE JUMP ADDR. (HI) 
073a 38 0e		        JR C,EX5                        ;C:YES, MATCHED 
073c			EX2: 
073c 23			        INC HL                          ;NC:NO, FIND JUMP ADDR. 
073d be			        CP (HL) 
073e 30 fc		        JR NC,EX2 
0740 23			        INC HL                          ;BUMP TO NEXT TAB. ITEM 
0741 d1			        POP DE                          ;RESTORE STRING POINTER 
0742 18 e6		        JR EX0                          ;TEST AGAINST NEXT ITEM 
0744			EX3: 
0744 3e 7f		        LD A,7FH                        ;PARTIAL MATCH, FIND 
0746			EX4: 
0746 23			        INC HL                          ;JUMP ADDR., WHICH IS 
0747 be			        CP (HL)                         ;FLAGGED BY BIT 7 
0748 30 fc		        JR NC,EX4 
074a			EX5: 
074a 7e			        LD A,(HL)                       ;LOAD HL WITH THE JUMP 
074b 23			        INC HL                          ;ADDRESS FROM THE TABLE 
074c 6e			        LD L,(HL) 
074d e6 7f		        AND 7FH                         ;MASK OFF BIT 7 
074f 67			        LD H,A 
0750 f1			        POP AF                          ;CLEAN UP THE GABAGE 
0751 e9			        JP (HL)                         ;AND WE GO DO IT 
0752			;------------------------------------------------------------------------------- 
0752			;/////////////////////////////////////////////////////////////////////////////// 
0752			;------------------------------------------------------------------------------- 
0752			;COMPUTER SPECIFIC ROUTINES. 
0752			;------------------------------------------------------------------------------- 
0752			SERIAL_INIT: 
0752			 
0752			    ; This routine is for initializing your serial port. 
0752			 
0752 c9			        RET 
0753			;------------------------------------------------------------------------------- 
0753			TX_RDY: 
0753			 
0753			    ; This routine is checking if the Serial Port is ready to send 
0753			    ; a character. 
0753			     
0753 c9			    RET 
0754			         
0754			;------------------------------------------------------------------------------- 
0754			RX_RDY: 
0754			 
0754			    ; This routine is for checkif if a character is available over 
0754			    ; serial. If a character is available, it returns to the calling 
0754			    ; function with the character in 'A' and the Z-flag reset. 
0754			    ; However, if a character is not available, it returns with the 
0754			    ; Z-flag set. 
0754			 
0754 c9			        RET 
0755			;------------------------------------------------------------------------------- 
0755			;/////////////////////////////////////////////////////////////////////////////// 
0755			;------------------------------------------------------------------------------- 
0755			 
0755			LSTROM:                                 ;ALL ABOVE CAN BE ROM 
0755			                    ;HERE DOWN MUST BE RAM 
0755			        ORG  08000H 
8000			        ORG  0FF00H 
ff00 00...		VARBGN: DS   55                         ;VARIABLE @(0) 
ff37 00...		BUFFER: DS   64                         ;INPUT BUFFER 
ff77 00...		BUFEND: DS   1                          ;BUFFER ENDS 
ff78 00...		STKLMT: DS   1                          ;TOP LIMIT FOR STACK 
ff79			        END 
# End of file tiny_basic_2k.z80
ff79
